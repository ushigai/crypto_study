

# This file was *autogenerated* from the file shortpad_attack.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_60 = Integer(60); _sage_const_1024 = Integer(1024)
from Crypto.Util.number import *
from random import getrandbits


class RSA:
    def __init__(self, bits):
        assert bits % _sage_const_2  == _sage_const_0 
        self.gen_new_key(bits)
    
    def gen_new_key(self, bits):
        self.p = getPrime(bits // _sage_const_2 )
        self.q = getPrime(bits // _sage_const_2 )
        self.N = self.p * self.q
        self.e = _sage_const_3 
        phi = (self.p - _sage_const_1 ) * (self.q - _sage_const_1 )
        self.d = inverse(self.e, phi)

    def encryption(self, m):
        if isinstance(m, str):
            m = bytes_to_long(m.encode("utf-8"))
        if isinstance(m, bytes):
            m = bytes_to_long(m)
        c = pow(m, self.e, self.N)
        return c

    def decryption(self, c):
        m = pow(c, self.d, self.N)
        m = long_to_bytes(m)
        return m
    
    def pgcd(self, f, g):
        while g:
            f, g = g, f % g
        return f
    
    def shortpadAttack(self, c1, c2):
        PR = PolynomialRing(Zmod(self.N), names=('x', 'y',)); (x, y,) = PR._first_ngens(2)
        PRS = PolynomialRing(Zmod(self.N), names=('xs',)); (xs,) = PRS._first_ngens(1)
        g1 = x**self.e - c1
        g2 = (x + y)**self.e - c2
        
        gg1 = g1.change_ring(PRS)
        gg2 = g2.change_ring(PRS)
        h = gg2.resultant(gg1)
        h = h.univariate_polynomial().subs(y=xs).monic()
        
        delta_ans = h.small_roots(epsilon=_sage_const_1 /_sage_const_60 )
        if len(delta_ans):
            if _sage_const_2 **delta_bits + _sage_const_1  < delta_ans[_sage_const_0 ]:
                print("Diff :", int(delta_ans[_sage_const_0 ]) - self.N)
            else:
                print("Diff :", delta_ans[_sage_const_0 ])
        else:
            return "Diff not found..."
        
        # Franklin-Reiter Related Message Attack
        PR = PolynomialRing(Zmod(self.N), names=('x',)); (x,) = PR._first_ngens(1)
        g1 = x**self.e - int(c1)
        g2 = (x + int(delta_ans[_sage_const_0 ]))**self.e - int(c2)

        ph = self.pgcd(g1, g2)
        ph = ph.monic()
        return int(-ph[_sage_const_0 ])
    

bits = _sage_const_1024 
e = _sage_const_3 
r = RSA(bits)
delta_bits = floor(bits / (e**_sage_const_2 ) / _sage_const_2 )
r1 = ZZ.random_element(_sage_const_2 **delta_bits)
r2 = ZZ.random_element(_sage_const_2 **delta_bits)
delta = r2 - r1
print("Diff 1 :", delta)

M = bytes_to_long(b"Coppersmiths_shortpad_attack!!!!!!!!!!!!!!!!!!!")
m1 = _sage_const_2 **delta_bits*M + r1
m2 = _sage_const_2 **delta_bits*M + r2

c1 = r.encryption(m1)
c2 = r.encryption(m2)

print("-*-*-*-*-*-*-*-*-*-*-*-")

print(long_to_bytes(r.shortpadAttack(c1, c2) >> delta_bits))


